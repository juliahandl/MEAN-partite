import igraph
import pandas as pd
import numpy as np

# Context to suppress verbose output of brim
# From https://stackoverflow.com/a/2829036
import contextlib
import sys

class DummyFile(object):
    def write(self, x): pass

@contextlib.contextmanager
def nostdout():
    save_stdout = sys.stdout
    sys.stdout = DummyFile()
    yield
    sys.stdout = save_stdout



def strip_groundtruth(graph, gt_attr_name=None):
    """
    Strips ground truth from a graph
    Inputs:
    graph: the graph to strip ground truth attribute from
    gt_attr_name: the name of the ground truth attribute, if None, then it looks for 'GT' attribute
    Returns: graph without the ground truth attribute
    """

    assert isinstance(graph, igraph.Graph), "graph argument should be of type igraph.Graph"
    assert isinstance(gt_attr_name, str) or isinstance(gt_attr_name, str), "gt_attr_name argument should be of type str (or None)"

    gt_attr_name = 'GT' if gt_attr_name is None else gt_attr_name

    try:
        del graph.vs[gt_attr_name]
    except KeyError as e:
        print(f'{e}: Attribute not found!')


########################################################
### Loading/Saving graphs (various file formats)
########################################################


def write_graph(g, f, format):
    """
    Writes a graph object g into a file or a stream f
    For format, see https://igraph.org/python/api/latest/igraph.Graph.html#write
    Example formats include: "adjacency", "dot", "edgelist", "graphml", "pickle", "pajek"
    apppend_ext set to True of false to append the file extension
    """
    g.write(f, format)


def read_graph(f, format, NComms=None):
    """
    Reads a graph object g from a file or a stream f
    For format, see https://igraph.org/python/api/latest/igraph.Graph.html#Read
    Example formats include: "adjacency", "dot", "edgelist", "graphml", "pickle", "pajek"
    apppend_ext set to True of false to append the file extension
    """
    g = igraph.Graph.Read(f, format)
    
    if NComms:
        print('Adding random ground truth with specified number of communities')
        g.vs['GT'] = np.random.choice(list(range(NComms)),size=len(g.vs))
    return g

########################################################
### Loading/Saving graphs (compatibility with legacy code)
########################################################
def load_graphs_from_path(path, num_graphs, graph_with_attribs=False):
    """
    Reads the graphs/data stored in the directory path (graphs/data generated by legacy code)
    Returns the graph, the vertices, and the ground truth
    """
    for it in range(0,num_graphs):
        # Read in graph and associated data
        g_org = igraph.Graph.Read_Edgelist(path+"Graph"+str(it)+".dat") # Read graph
        # print(g_org)
        truth = pd.read_csv(path+"Graph"+str(it)+".truth.dat", sep=',',header=None)
        # print(truth)
        # groundtruth=truth.iloc[:, 1].values.astype(int).tolist() # Ground truth memberships for vertices
        groundtruth=truth.iloc[:, 1].values.tolist() # Ground truth memberships for vertices
        v = pd.read_csv(path+"Graph"+str(it)+".vertices.dat", sep=',',header=None)
        # vertices=v.iloc[:, 1].values.astype(int).tolist() # memberships for vertices
        vertices=v.iloc[:, 1].values.tolist() # memberships for vertices
        edges = g_org.get_edgelist() # graph edges
        # Generate Bipartite graph
        g3 = igraph.Graph.Bipartite(vertices, edges)
        assert len(g3.clusters())==1, "There should be only one cluster" # This should always be 1 one now
        if not graph_with_attribs:
            yield g3, vertices, groundtruth
        else:
            g3.vs['VX'] = vertices # Vertices
            g3.vs['GT'] = groundtruth # Ground truth
            yield g3


def save_graph_data_to_path(path, graph, vertices, groundtruth, index):
    """
    Saves the graph and associated data into path as per the legacy code format
    """
    graph.write_edgelist(path+"Graph"+str(index)+".dat")
    p = pd.DataFrame(groundtruth)
    p.to_csv(path+"Graph"+str(index)+".truth.dat", sep=',',header=None)
    p = pd.DataFrame(vertices)
    p.to_csv(path+"Graph"+str(index)+".vertices.dat", sep=',',header=None)


def save_graph_to_path(path, graph, index):
    """
    Saves the graph (which includes attributes GT and VX) into path as per the legacy code format
    """
    groundtruth = graph.vs['GT']
    vertices = graph.vs['VX']
    save_graph_data_to_path(path, graph, vertices, groundtruth, index)


def save_graphs_data_to_path(path, graphs_iter, vertices_iter, groundtruth_iter):
    """
    Saves graphs and associated data into path as per the legacy code
    """
    for idx, (graph, vertices, groundtruth) in enumerate(zip(graphs_iter, vertices_iter, groundtruth_iter)):
        save_graph_data_to_path(path, graph, vertices, groundtruth, idx)


def save_graphs_to_path(path, graphs_iter):
    """
    Saves the graphs (which include attributes GT and VX into path as per the legacy code format
    """
    
    for idx, graph in enumerate(graphs_iter):
        # print(idx)
        save_graph_to_path(path, graph, idx)

########################################################
#### Tests
########################################################
def test_strip_groundtruth():
    g = igraph.Graph.GRG(100, 0.2)
    g.vs['GT'] = 1
    print (g.vs.attributes())
    # print(g.vs['GT'])
    strip_groundtruth(g, 'GT')
    print (g.vs.attributes())
    print("Stripping an attribute 'GT' that does not exist")
    strip_groundtruth(g, 'GT')
    

def test_write_graph():
    g = igraph.Graph.GRG(100, 0.2)
    g.vs['GT'] = 1
    g.vs['VX'] = 0
    write_graph(g, 'graph.adjacency', format='adjacency')
    write_graph(g, 'graph.dot', format='dot')
    write_graph(g, 'graph.edgelist', format='edgelist')
    write_graph(g, 'graph.graphml', format='graphml')
    write_graph(g, 'graph.pickle', format='pickle')
    write_graph(g, 'graph.pajek', format='pajek')


def test_read_graph():
    test_write_graph()
    g = read_graph('graph.adjacency', format='adjacency')
    print('adjacency')
    igraph.summary(g)
    # g = read_graph('graph.dot', format='dot') # No reader
    g = read_graph('graph.edgelist', format='edgelist')
    print('edgelist')
    igraph.summary(g)
    g = read_graph('graph.graphml', format='graphml')
    print('graphml')
    igraph.summary(g)
    g = read_graph('graph.pickle', format='pickle')
    print('pickle')
    igraph.summary(g)
    g = read_graph('graph.pajek', format='pajek')
    print('pajek')
    igraph.summary(g)


if __name__ == "__main__":
    test_strip_groundtruth()
    test_write_graph()
    test_read_graph()





    



